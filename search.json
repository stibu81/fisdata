[{"path":"https://stibu81.github.io/fisdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 fisdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stibu81.github.io/fisdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Lanz. Author, maintainer.","code":""},{"path":"https://stibu81.github.io/fisdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lanz S (2025). fisdata: Query Data FIS Web Page. R package version 0.1.0.9000, https://stibu81.github.io/fisdata/.","code":"@Manual{,   title = {fisdata: Query Data From the FIS Web Page},   author = {Stefan Lanz},   year = {2025},   note = {R package version 0.1.0.9000},   url = {https://stibu81.github.io/fisdata/}, }"},{"path":"https://stibu81.github.io/fisdata/index.html","id":"fisdata-","dir":"","previous_headings":"","what":"Query Data From the FIS Web Page","title":"Query Data From the FIS Web Page","text":"fisdata makes easy download data FIS webpage tibbles.","code":""},{"path":"https://stibu81.github.io/fisdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Query Data From the FIS Web Page","text":"can install development version fisdata GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"stibu81/fisdata\")"},{"path":"https://stibu81.github.io/fisdata/index.html","id":"available-querying-functions","dir":"","previous_headings":"","what":"Available Querying Functions","title":"Query Data From the FIS Web Page","text":"fisdata currently offers three functions query different types data: query_athletes(): query athletes name attributes obtain table matching athletes. query_results(): query race results single athlete. query_race(): obtain full results single race.","code":""},{"path":"https://stibu81.github.io/fisdata/index.html","id":"running-a-query","dir":"","previous_headings":"","what":"Running a Query","title":"Query Data From the FIS Web Page","text":"Since athletes identified Competitor-ID races Race-ID usually known user, generally easiest start query finding athlete. example, following call gets information Didier Cuche: result includes competitor_id, required input order query athlete’s results. object returned query_athletes(), now possible query race result athlete. Note query_results() must called single athlete. following query obtains results downhill races: result includes race_id, required input order query full results race. extracting one races table, one can now obtain full results race. following code gets full result Didier Cuche’s last victory Wengen: Note objects created querying functions always include URL downloaded. URL can obtained follows: can copy address browser order see data presented FIS web site. make easy possible, show_url() automatically copies URL clip board, called interactive R session.","code":"library(fisdata) library(dplyr)  cuche <- query_athletes(\"cuche\", \"didier\") cuche %>%    select(active:nation, sector, brand, competitor_id) #> # A tibble: 1 × 7 #>   active fis_code name         nation sector brand competitor_id #>   <lgl>  <chr>    <chr>        <chr>  <chr>  <chr> <chr>         #> 1 FALSE  510030   Cuche Didier SUI    AL     Head  11795 cuche_res <- query_results(cuche, discipline = \"DH\") cuche_res %>%    select(athlete:place, category:rank, race_id) #> # A tibble: 303 × 7 #>    athlete      date       place      category  discipline  rank race_id #>    <chr>        <date>     <chr>      <chr>     <chr>      <int> <chr>   #>  1 Cuche Didier 2012-03-14 Schladming World Cup Downhill      17 66746   #>  2 Cuche Didier 2012-03-13 Schladming Training  Downhill       1 66744   #>  3 Cuche Didier 2012-03-03 Kvitfjell  World Cup Downhill      10 66811   #>  4 Cuche Didier 2012-03-01 Kvitfjell  Training  Downhill       2 66809   #>  5 Cuche Didier 2012-02-29 Kvitfjell  Training  Downhill       3 66810   #>  6 Cuche Didier 2012-02-11 Sochi      World Cup Downhill      12 66801   #>  7 Cuche Didier 2012-02-10 Sochi      Training  Downhill       7 66800   #>  8 Cuche Didier 2012-02-08 Sochi      Training  Downhill       2 66798   #>  9 Cuche Didier 2012-02-04 Chamonix   World Cup Downhill       7 66795   #> 10 Cuche Didier 2012-02-03 Chamonix   World Cup Downhill       3 66767   #> # ℹ 293 more rows wengen_res <- cuche_res %>%    filter(place == \"Wengen\", rank == 1) %>%    head(n = 1) %>%   query_race() wengen_res #> # A tibble: 70 × 8 #>     rank   bib fis_code name               birth_year nation time      diff_time #>    <int> <int> <chr>    <chr>                   <int> <chr>  <Period>  <Period>  #>  1     1    18 510030   Cuche Didier             1974 SUI    1M 50.31S 0S        #>  2     2    12 292514   Heel Werner              1982 ITA    1M 51.17S 0.86S     #>  3     3    15 511313   Janka Carlo              1986 SUI    1M 51.52S 1.21S     #>  4     4     1 560332   Jerman Andrej            1978 SLO    1M 51.58S 1.27S     #>  5     5     3 533866   Nyman Steven             1982 USA    1M 51.67S 1.36S     #>  6     6    14 51005    Scheiber Mario           1983 AUT    1M 51.76S 1.45S     #>  7     7    28 50858    Streitberger Georg       1981 AUT    1M 51.77S 1.46S     #>  8     8    16 50041    Walchhofer Michael       1975 AUT    1M 51.79S 1.48S     #>  9     8    11 50753    Kroell Klaus             1980 AUT    1M 51.79S 1.48S     #> 10    10    25 293006   Innerhofer Christ…       1984 ITA    1M 51.85S 1.54S     #> # ℹ 60 more rows show_url(cuche_res) #> https://www.fis-ski.com/DB/general/athlete-biography.html?sectorcode=AL&seasoncode=&competitorid=11795&type=result&categorycode=&sort=&place=&disciplinecode=DH&position=&limit=2000"},{"path":"https://stibu81.github.io/fisdata/index.html","id":"known-limitations","dir":"","previous_headings":"","what":"Known Limitations","title":"Query Data From the FIS Web Page","text":"Querying athletes results expected work sectors disciplines. Querying races, however, difficult, since different types races results rendered different form FIS web site. fisdata able handle results many common types races expected fail types yet covered. example, usually handle team races:","code":"query_athletes(\"von allmen\", \"franjo\") %>%    query_results(category = \"WSC\") %>%    filter(discipline == \"Team Combined\") %>%    query_race() #> Warning in query_race(.): ! The data contains some fields unknown to fisdata. #> ℹ Affected column: 'name' #> ! These columns might not be processed as expected. #> Warning in process_race_column(name, race_df): NAs introduced by coercion #> Warning in process_race_column(name, race_df): NAs introduced by coercion #> Warning in process_race_column(name, race_df): NAs introduced by coercion #> Error in `dplyr::as_tibble()`: #> ! Column names `nation` and `time` must not be duplicated. #> Use `.name_repair` to specify repair. #> Caused by error in `repaired_names()`: #> ! Names must be unique. #> ✖ These names are duplicated: #>   * \"nation\" at locations 7 and 8. #>   * \"time\" at locations 9 and 10."},{"path":"https://stibu81.github.io/fisdata/reference/categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Codes for Categories — categories","title":"Table of Codes for Categories — categories","text":"dataset contains codes race categories data can obtained FIS webpage. codes can used filter specific category query_results().","code":""},{"path":"https://stibu81.github.io/fisdata/reference/categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Codes for Categories — categories","text":"","code":"categories"},{"path":"https://stibu81.github.io/fisdata/reference/categories.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of Codes for Categories — categories","text":"data frame 97 rows 2 variables: code code category. consist two four capital letters, longer (8 letters) contain digits. description clear text description category","code":""},{"path":"https://stibu81.github.io/fisdata/reference/categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of Codes for Categories — categories","text":"categories ordered follows: Olympic Games World Championships World Cups Cups (excluding Youth & Masters) Everything else latter two groups involve many categories ordered alphabetically code within group.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/disciplines.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Codes for Disciplines — disciplines","title":"Table of Codes for Disciplines — disciplines","text":"dataset contains codes disciplines data can obtained FIS webpage. codes can used filter specific discipline query_results(). Note available disciplines depend sector.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/disciplines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Codes for Disciplines — disciplines","text":"","code":"disciplines"},{"path":"https://stibu81.github.io/fisdata/reference/disciplines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of Codes for Disciplines — disciplines","text":"data frame 152 rows 4 variables: sector code sector, discipline belongs sector_description clear-text description sector code code category. alphanumeric, starting capital letter  digit. 2 3 characters long, six characters possible. description clear text description category","code":""},{"path":"https://stibu81.github.io/fisdata/reference/fisdata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fisdata: Query Data From the FIS Web Page — fisdata-package","title":"fisdata: Query Data From the FIS Web Page — fisdata-package","text":"Query data web site International Ski Snowboard Federation FIS (https://www.fis-ski.com).","code":""},{"path":[]},{"path":"https://stibu81.github.io/fisdata/reference/fisdata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fisdata: Query Data From the FIS Web Page — fisdata-package","text":"Maintainer: Stefan Lanz slanz1137@gmail.com","code":""},{"path":"https://stibu81.github.io/fisdata/reference/nations.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of IOC Country Codes — nations","title":"Table of IOC Country Codes — nations","text":"dataset contains current historic IOC country codes. codes can used filter specific nation query_athletes().","code":""},{"path":"https://stibu81.github.io/fisdata/reference/nations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of IOC Country Codes — nations","text":"","code":"nations"},{"path":"https://stibu81.github.io/fisdata/reference/nations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of IOC Country Codes — nations","text":"data frame 219 rows 3 variables: code IOC country code consisting three capital letters country name country current code currently use?","code":""},{"path":"https://stibu81.github.io/fisdata/reference/nations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of IOC Country Codes — nations","text":"https://en.wikipedia.org/wiki/List_of_IOC_country_codes Section \"Current NOCs\" countries current = TRUE section \"Historic NOCs teams, Codes still use\" current = FALSE.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Athletes — query_athletes","title":"Query Athletes — query_athletes","text":"Query athletes using various filters. Omitting filter means athletes value field returned. Filtering case-insensitive last_name, first_name, brand, string matching partial.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Athletes — query_athletes","text":"","code":"query_athletes(   last_name = \"\",   first_name = \"\",   sector = \"\",   nation = \"\",   gender = \"\",   birth_year = \"\",   brand = \"\",   active_only = FALSE )"},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Athletes — query_athletes","text":"last_name, first_name last first name. String matching partial. API support special characters, many handled automatically (see 'Details'). sector abbreviation sector, e.g., \"AL\" alpine skiing. See dataset sectors possible values. nation abbreviation nation, e.g., \"SUI\" Switzerland. value matched exactly. See dataset nations possible values. gender abbreviation gender: \"M\" male \"F\" female birth_year birth year. also supports multiple years separated commas (e.g, \"1995,1998,2000\") year ranges (e.g., \"1990-1995\"). brand ski snowboard brand used athlete. String matching partial. API support special characters, many handled automatically (see 'Details'). active_only query restricted active athletes.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Athletes — query_athletes","text":"tibble following columns: active, fis_code, name, nation, age, birthdate, gender, sector, club, brand, competitor_id. active logical indicating whether athlete still active. age gives year integer, value often missing. birthdate returned character.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Athletes — query_athletes","text":"API support special character fields last_name, first_name, brand. following special characters handled automatically: à, á, å, ä, æ, ç, ć, č, ð, é, è, ê, ë, ï, ñ, ø, ó, ő, ö, œ, š, ß, ú, ü, ž. special characters must replaced suitable substitute user. One use function get competitor id athlete, needed order query athletes results query_results().","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Athletes — query_athletes","text":"","code":"if (FALSE) { # \\dontrun{ # find Swiss athletes with last name \"Cuche\" query_athletes(\"cuche\", nation = \"SUI\")  # find French alpine skiers using Rossignol skis query_athletes(   sector = \"AL\",   nation = \"FRA\",   brand = \"Rossignol\",   active_only = TRUE )  # find Loïc Maillard. Note that even if the \"ï\" may be used in the query, # the name the name is returned without the special character. query_athletes(\"meillard\", \"loïc\")  # the query works the same without the special character query_athletes(\"meillard\", \"loic\") } # }"},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Race — query_race","title":"Query Race — query_race","text":"Query full results race.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Race — query_race","text":"","code":"query_race(result)"},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Race — query_race","text":"result list data frame fields/columns race_id sector describe single race. easiest way create data frame function query_results(). function can return multiple results, query_race() returns results one race. multiple results passed, first one used.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Race — query_race","text":"tibble least following columns: rank, bib, fis_code, name, birth_year, nation. Depending type race, additional columns like time, run1, run2, total_time, diff_time, fis_points, cup_points.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Race — query_race","text":"Different types races may different way display results. disciplines use time measurements, use points system even combination different systems. disciplines, races involve single run single time measurement, use multiple runs accordingly multiple run times possibly total time. function tries flexible determining format used given race, known fail special cases (e.g., team races alpine skiing).","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Race — query_race","text":"","code":"if (FALSE) { # \\dontrun{ # the results for a race can be queried by using a specific race of an # athlete as input. So we get all downhill results for Marco Odermatt. odermatt <- query_athletes(\"odermatt\", \"marco\") odermatt_res <- query_results(odermatt, discipline = \"DH\")  # show the first of the results odermatt_res[1, ]  # get the full results for this race query_race(odermatt_res[1, ]) } # }"},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Results for an Athlete — query_results","title":"Query Results for an Athlete — query_results","text":"Query results athlete using various filters. Omitting filter means results value field returned. Filtering case-insensitive place string matches partial.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Results for an Athlete — query_results","text":"","code":"query_results(athlete, season = \"\", category = \"\", place = \"\", discipline = \"\")"},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Results for an Athlete — query_results","text":"athlete list data frame fields/columns competitor_id sector describe single athlete. easiest way create data frame function query_athletes(). function can return multiple athletes, query_results() returns results one athlete. multiple athletes passed, first one used. season year season ended, .e., 2020 stands season 2019/2020. possible filter multiple seasons . category abbreviation category race, e.g., \"WC\" \"World Cup\". See dataset categories possible values. place location race. API support special characters, many handled automatically (see 'Details'). discipline abbreviation discipline, e.g., \"DH\" \"Downhill\". See dataset disciplines possible values.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Results for an Athlete — query_results","text":"tibble following columns: athlete, date, place, nation, sector, category, discipline, rank, fis_points, cup_points, race_id.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Results for an Athlete — query_results","text":"API support special character field place. following special characters handled automatically: à, á, å, ä, æ, ç, ć, č, ð, é, è, ê, ë, ï, ñ, ø, ó, ő, ö, œ, š, ß, ú, ü, ž. special characters must replaced suitable substitute user.","code":""},{"path":[]},{"path":"https://stibu81.github.io/fisdata/reference/sectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Codes for Sectors — sectors","title":"Table of Codes for Sectors — sectors","text":"dataset contains codes sectors data can obtained FIS webpage. codes can used filter specific sector query_athletes().","code":""},{"path":"https://stibu81.github.io/fisdata/reference/sectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Codes for Sectors — sectors","text":"","code":"sectors"},{"path":"https://stibu81.github.io/fisdata/reference/sectors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of Codes for Sectors — sectors","text":"data frame 14 rows 2 variables: code code sector consisting two three (parasports sectors) capital letters description clear text name sector","code":""},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Show URL associated With a Query — show_url","title":"Show URL associated With a Query — show_url","text":"functions query_*() call URL FIS web page collect data. show_url() returns URL used produce table fisdata-results.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show URL associated With a Query — show_url","text":"","code":"show_url(fisdata_df)"},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show URL associated With a Query — show_url","text":"fisdata_df table fisdata-results produced one query_*()-functions.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show URL associated With a Query — show_url","text":"character vector length one URL used create table. interactive session also copies URL clipboard side effect.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show URL associated With a Query — show_url","text":"run interactive session, URL also copied clipboard can pasted browser.","code":""}]
