[{"path":"https://stibu81.github.io/fisdata/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 fisdata authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://stibu81.github.io/fisdata/articles/fisdata.html","id":"terminology","dir":"Articles","previous_headings":"","what":"Terminology","title":"Introduction to fisdata","text":"order use functionality package understand results returns, important familiar terminology. follows mostly terminology used FIS page. web page, uses terms consistently never uses term different things. following relevant terms example value . Explanations terms obvious meaning omitted. filtering sector, discipline, category, code used instead full description. See datasets sectors, disciplines, categories, respectively, list available codes description.","code":""},{"path":"https://stibu81.github.io/fisdata/articles/fisdata.html","id":"available-querying-functions","dir":"Articles","previous_headings":"","what":"Available Querying Functions","title":"Introduction to fisdata","text":"fisdata offers following functions query different types data: query_athletes(): query athletes name attributes obtain table matching athletes. query_results(): query competition results single athlete. query_race(): get full results single competition. query_events(): query events date, place, attributes. query_competitions(): obtain individual competitions associated event. query_standings(): get cup standings ranks points per discipline. function returns tibble contains instances given type rows. following diagram shows types tables can created. node stands table label node indicating type objects contained table. arrow labelled name function returns table arrow pointing . functions require instance another type input, indicated arrows. three exceptions, query_athletes(), query_standings(), query_events() thus usual entry points start query. querying functions cached, , called multiple times session, data downloaded . leads better performance reduces number requests sent FIS webpage.","code":""},{"path":"https://stibu81.github.io/fisdata/articles/fisdata.html","id":"running-a-query","dir":"Articles","previous_headings":"","what":"Running a Query","title":"Introduction to fisdata","text":"Since athletes identified Competitor-ID races Race-ID usually known user, generally easiest start query finding athlete. example, following call gets information Didier Cuche: result includes competitor_id, required input order query athlete’s results. object returned query_athletes(), now possible query race result athlete. Note query_results() must called single athlete. following query obtains results downhill races: result includes race_id, required input order query full results race. extracting one races table, one can now obtain full results race. following code gets full result Didier Cuche’s last victory Wengen: Alternatively, may start querying event. finds Wengen races season 2024/25: result includes event_id, required input order query competitions took place event: table now allows query full race results (similar output query_results()). example, results Super G can obtained follows: Note objects created querying functions always include URL downloaded. URL can obtained follows: can copy address browser order see data presented FIS web site. make easy possible, show_url() automatically copies URL clip board, called interactive R session.","code":"library(fisdata) library(dplyr)  cuche <- query_athletes(\"cuche\", \"didier\") cuche %>%    select(active:nation, sector, brand, competitor_id) #> # A tibble: 1 × 7 #>   active fis_code name         nation sector brand competitor_id #>   <lgl>  <chr>    <chr>        <chr>  <chr>  <chr> <chr>         #> 1 FALSE  510030   Cuche Didier SUI    AL     Head  11795 cuche_res <- query_results(cuche, discipline = \"DH\") cuche_res %>%    select(athlete:place, category:rank, race_id) #> # A tibble: 303 × 7 #>    athlete      date       place      category  discipline  rank race_id #>    <chr>        <date>     <chr>      <chr>     <chr>      <int> <chr>   #>  1 Cuche Didier 2012-03-14 Schladming World Cup Downhill      17 66746   #>  2 Cuche Didier 2012-03-13 Schladming Training  Downhill       1 66744   #>  3 Cuche Didier 2012-03-03 Kvitfjell  World Cup Downhill      10 66811   #>  4 Cuche Didier 2012-03-01 Kvitfjell  Training  Downhill       2 66809   #>  5 Cuche Didier 2012-02-29 Kvitfjell  Training  Downhill       3 66810   #>  6 Cuche Didier 2012-02-11 Sochi      World Cup Downhill      12 66801   #>  7 Cuche Didier 2012-02-10 Sochi      Training  Downhill       7 66800   #>  8 Cuche Didier 2012-02-08 Sochi      Training  Downhill       2 66798   #>  9 Cuche Didier 2012-02-04 Chamonix   World Cup Downhill       7 66795   #> 10 Cuche Didier 2012-02-03 Chamonix   World Cup Downhill       3 66767   #> # ℹ 293 more rows wengen_res <- cuche_res %>%    filter(place == \"Wengen\", rank == 1) %>%    head(n = 1) %>%   query_race() wengen_res %>%    select(rank, bib, name:diff_time) #> # A tibble: 70 × 7 #>     rank   bib name                birth_year nation time      diff_time #>    <int> <int> <chr>                    <int> <chr>  <Period>  <Period>  #>  1     1    18 Cuche Didier              1974 SUI    1M 50.31S 0S        #>  2     2    12 Heel Werner               1982 ITA    1M 51.17S 0.86S     #>  3     3    15 Janka Carlo               1986 SUI    1M 51.52S 1.21S     #>  4     4     1 Jerman Andrej             1978 SLO    1M 51.58S 1.27S     #>  5     5     3 Nyman Steven              1982 USA    1M 51.67S 1.36S     #>  6     6    14 Scheiber Mario            1983 AUT    1M 51.76S 1.45S     #>  7     7    28 Streitberger Georg        1981 AUT    1M 51.77S 1.46S     #>  8     8    16 Walchhofer Michael        1975 AUT    1M 51.79S 1.48S     #>  9     8    11 Kroell Klaus              1980 AUT    1M 51.79S 1.48S     #> 10    10    25 Innerhofer Christof       1984 ITA    1M 51.85S 1.54S     #> # ℹ 60 more rows wengen2025 <- query_events(sector = \"AL\", place = \"wengen\", season = 2025) wengen2025 %>%    select(start_date:genders) #> # A tibble: 1 × 8 #>   start_date end_date   place  nation sector categories disciplines    genders #>   <date>     <date>     <chr>  <chr>  <chr>  <chr>      <chr>          <chr>   #> 1 2025-01-14 2025-01-19 Wengen SUI    AL     TRA / WC   4xDH / SL / SG M wengen_races <- query_competitions(wengen2025) wengen_races %>%    select(place:cancelled) #> # A tibble: 6 × 8 #>   place  date       time  competition       sector category gender cancelled #>   <chr>  <date>     <chr> <chr>             <chr>  <chr>    <chr>  <lgl>     #> 1 Wengen 2025-01-14 12:30 Downhill Training AL     TRA      M      FALSE     #> 2 Wengen 2025-01-15 12:30 Downhill Training AL     TRA      M      FALSE     #> 3 Wengen 2025-01-16 NA    Downhill Training AL     TRA      M      TRUE      #> 4 Wengen 2025-01-17 12:30 Super G           AL     WC       M      FALSE     #> 5 Wengen 2025-01-18 12:45 Downhill          AL     WC       M      FALSE     #> 6 Wengen 2025-01-19 10:15 Slalom            AL     WC       M      FALSE sg_res <- wengen_races %>%    filter(competition == \"Super G\") %>%    query_race() sg_res %>%    select(rank, bib, name:diff_time) #> # A tibble: 47 × 8 #>     rank   bib name               brand    birth_year nation time      diff_time #>    <int> <int> <chr>              <chr>         <int> <chr>  <Period>  <Period>  #>  1     1     3 Von Allmen Franjo  Head           2001 SUI    1M 47.65S 0S        #>  2     2     6 Kriechmayr Vincent Head           1991 AUT    1M 47.75S 0.1S      #>  3     3    11 Rogentin Stefan    Fischer        1994 SUI    1M 48.23S 0.58S     #>  4     4     1 Crawford James     Head           1997 CAN    1M 48.27S 0.62S     #>  5     5     9 Paris Dominik      Nordica        1989 ITA    1M 48.28S 0.63S     #>  6     6     8 Casse Mattia       Rossign…       1990 ITA    1M 48.57S 0.92S     #>  7     7    13 Odermatt Marco     Stoeckli       1997 SUI    1M 48.69S 1.04S     #>  8     8    16 Alexander Cameron  Rossign…       1997 CAN    1M 48.78S 1.13S     #>  9     9     2 Monney Alexis      Stoeckli       2000 SUI    1M 48.92S 1.27S     #> 10    10    26 Feurstein Lukas    Head           2001 AUT    1M 48.97S 1.32S     #> # ℹ 37 more rows show_url(cuche_res) #> https://www.fis-ski.com/DB/general/athlete-biography.html?sectorcode=AL&seasoncode=&competitorid=11795&type=result&categorycode=&sort=&place=&disciplinecode=DH&position=&limit=2000"},{"path":"https://stibu81.github.io/fisdata/articles/fisdata.html","id":"known-limitations","dir":"Articles","previous_headings":"","what":"Known Limitations","title":"Introduction to fisdata","text":"Querying athletes results expected work sectors disciplines. Querying races, however, difficult, since different types races results rendered different form FIS web site. fisdata able handle results many common types races expected fail types yet covered. example, usually handle team races:","code":"query_athletes(\"von allmen\", \"franjo\") %>%    query_results(category = \"WSC\") %>%    filter(discipline == \"Team Combined\") %>%    query_race() #> Warning in query_race(.): ! The data contains some fields unknown to fisdata. #> ℹ Affected column: 'name' #> ! These columns might not be processed as expected. #> Warning in process_race_column(name, race_df): NAs introduced by coercion #> Warning in process_race_column(name, race_df): NAs introduced by coercion #> Warning in process_race_column(name, race_df): NAs introduced by coercion #> Error in `dplyr::as_tibble()`: #> ! Column names `nation` and `time` must not be duplicated. #> Use `.name_repair` to specify repair. #> Caused by error in `repaired_names()`: #> ! Names must be unique. #> ✖ These names are duplicated: #>   * \"nation\" at locations 7 and 8. #>   * \"time\" at locations 9 and 10."},{"path":"https://stibu81.github.io/fisdata/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Stefan Lanz. Author, maintainer.","code":""},{"path":"https://stibu81.github.io/fisdata/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Lanz S (2025). fisdata: Query Data FIS Web Page. R package version 0.1.0.9007, https://stibu81.github.io/fisdata/.","code":"@Manual{,   title = {fisdata: Query Data From the FIS Web Page},   author = {Stefan Lanz},   year = {2025},   note = {R package version 0.1.0.9007},   url = {https://stibu81.github.io/fisdata/}, }"},{"path":"https://stibu81.github.io/fisdata/index.html","id":"fisdata-","dir":"","previous_headings":"","what":"Query Data From the FIS Web Page","title":"Query Data From the FIS Web Page","text":"fisdata makes easy download data FIS webpage tibbles. provides variety functions query different types data like athletes, events, race results.","code":""},{"path":"https://stibu81.github.io/fisdata/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Query Data From the FIS Web Page","text":"can install development version fisdata GitHub :","code":"# install.packages(\"remotes\") remotes::install_github(\"stibu81/fisdata\")"},{"path":"https://stibu81.github.io/fisdata/index.html","id":"available-querying-functions","dir":"","previous_headings":"","what":"Available Querying Functions","title":"Query Data From the FIS Web Page","text":"fisdata offers following functions query different types data: query_athletes(): query athletes name attributes obtain table matching athletes. query_results(): query competition results single athlete. query_race(): get full results single competition. query_events(): query events date, place, attributes. query_competitions(): obtain individual competitions associated event. query_standings(): get cup standings ranks points per discipline. functions cached, , called multiple times session, data downloaded . leads better performance reduces number requests sent FIS webpage.","code":""},{"path":"https://stibu81.github.io/fisdata/index.html","id":"example-queries","dir":"","previous_headings":"","what":"Example Queries","title":"Query Data From the FIS Web Page","text":"Use query_athletes() query_results() get Didier Cuche’s full downhill results: Use query_events(), query_competitions() query_race() get full results Wengen Downhill 2025: Use query_standings() get overall downhill standings men’s alpine skiing world cup season 2022/23:","code":"library(fisdata) library(dplyr)  query_athletes(\"cuche\", \"didier\") %>%    query_results(discipline = \"DH\") %>%    select(athlete:place, category:rank, cup_points) #> # A tibble: 303 × 7 #>    athlete      date       place      category  discipline  rank cup_points #>    <chr>        <date>     <chr>      <chr>     <chr>      <int>      <dbl> #>  1 Cuche Didier 2012-03-14 Schladming World Cup Downhill      17         NA #>  2 Cuche Didier 2012-03-13 Schladming Training  Downhill       1         NA #>  3 Cuche Didier 2012-03-03 Kvitfjell  World Cup Downhill      10         26 #>  4 Cuche Didier 2012-03-01 Kvitfjell  Training  Downhill       2         NA #>  5 Cuche Didier 2012-02-29 Kvitfjell  Training  Downhill       3         NA #>  6 Cuche Didier 2012-02-11 Sochi      World Cup Downhill      12         22 #>  7 Cuche Didier 2012-02-10 Sochi      Training  Downhill       7         NA #>  8 Cuche Didier 2012-02-08 Sochi      Training  Downhill       2         NA #>  9 Cuche Didier 2012-02-04 Chamonix   World Cup Downhill       7         36 #> 10 Cuche Didier 2012-02-03 Chamonix   World Cup Downhill       3         60 #> # ℹ 293 more rows query_events(sector = \"AL\", place = \"wengen\", season = 2025) %>%    query_competitions() %>%    filter(competition == \"Downhill\") %>%    query_race() %>%    select(rank, bib, name:diff_time) #> # A tibble: 48 × 8 #>     rank   bib name              brand     birth_year nation time      diff_time #>    <int> <int> <chr>             <chr>          <int> <chr>  <Period>  <Period>  #>  1     1    13 Odermatt Marco    Stoeckli        1997 SUI    2M 22.58S 0S        #>  2     2    12 Von Allmen Franjo Head            2001 SUI    2M 22.95S 0.37S     #>  3     3     1 Hrobat Miha       Atomic          1995 SLO    2M 23.15S 0.57S     #>  4     4     6 Paris Dominik     Nordica         1989 ITA    2M 23.27S 0.69S     #>  5     5     7 Alexander Cameron Rossignol       1997 CAN    2M 23.29S 0.71S     #>  6     6    14 Bennett Bryce     Fischer         1992 USA    2M 23.41S 0.83S     #>  7     7     9 Murisier Justin   Head            1992 SUI    2M 23.76S 1.18S     #>  8     8    37 Roesti Lars       Stoeckli        1998 SUI    2M 23.85S 1.27S     #>  9     9    16 Crawford James    Head            1997 CAN    2M 23.86S 1.28S     #> 10    10     3 Schieder Florian  Atomic          1995 ITA    2M 23.95S 1.37S     #> # ℹ 38 more rows query_standings(sector = \"AL\", season = 2023,                 category = \"WC\", gender = \"M\") %>%    select(athlete, nation, all_rank:dh_points) #> # A tibble: 160 × 6 #>    athlete                 nation all_rank all_points dh_rank dh_points #>    <chr>                   <chr>     <int>      <int>   <int>     <int> #>  1 Odermatt Marco          SUI           1       2042       3       462 #>  2 Kilde Aleksander Aamodt NOR           2       1340       1       760 #>  3 Kristoffersen Henrik    NOR           3       1154      NA        NA #>  4 Braathen Lucas          NOR           4        954      NA        NA #>  5 Kriechmayr Vincent      AUT           5        953       2       614 #>  6 Meillard Loic           SUI           6        877      NA        NA #>  7 Schwarz Marco           AUT           7        863      31        64 #>  8 Pinturault Alexis       FRA           8        839      NA        NA #>  9 Feller Manuel           AUT           9        546      NA        NA #> 10 Zenhaeusern Ramon       SUI          10        467      NA        NA #> # ℹ 150 more rows"},{"path":"https://stibu81.github.io/fisdata/index.html","id":"learn-more","dir":"","previous_headings":"","what":"Learn more","title":"Query Data From the FIS Web Page","text":"Get started vignette(\"fisdata\") can also found . Browse full reference functions datasets.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/categories.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Codes for Categories — categories","title":"Table of Codes for Categories — categories","text":"dataset contains codes race categories data can obtained FIS webpage. codes can used filter specific category query_results().","code":""},{"path":"https://stibu81.github.io/fisdata/reference/categories.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Codes for Categories — categories","text":"","code":"categories"},{"path":"https://stibu81.github.io/fisdata/reference/categories.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of Codes for Categories — categories","text":"data frame 97 rows 2 variables: code code category. consist two four capital letters, longer (8 letters) contain digits. description clear text description category","code":""},{"path":"https://stibu81.github.io/fisdata/reference/categories.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Table of Codes for Categories — categories","text":"categories ordered follows: Olympic Games World Championships World Cups Cups (excluding Youth & Masters) Everything else latter two groups involve many categories ordered alphabetically code within group.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/disciplines.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Codes for Disciplines — disciplines","title":"Table of Codes for Disciplines — disciplines","text":"dataset contains codes disciplines data can obtained FIS webpage. codes can used filter specific discipline query_results(). Note available disciplines depend sector.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/disciplines.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Codes for Disciplines — disciplines","text":"","code":"disciplines"},{"path":"https://stibu81.github.io/fisdata/reference/disciplines.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of Codes for Disciplines — disciplines","text":"data frame 152 rows 4 variables: sector code sector, discipline belongs sector_description clear-text description sector code code category. alphanumeric, starting capital letter  digit. 2 3 characters long, six characters possible. description clear text description category","code":""},{"path":"https://stibu81.github.io/fisdata/reference/fisdata-package.html","id":null,"dir":"Reference","previous_headings":"","what":"fisdata: Query Data From the FIS Web Page — fisdata-package","title":"fisdata: Query Data From the FIS Web Page — fisdata-package","text":"Query data web site International Ski Snowboard Federation FIS (https://www.fis-ski.com).","code":""},{"path":[]},{"path":"https://stibu81.github.io/fisdata/reference/fisdata-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"fisdata: Query Data From the FIS Web Page — fisdata-package","text":"Maintainer: Stefan Lanz slanz1137@gmail.com","code":""},{"path":"https://stibu81.github.io/fisdata/reference/nations.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of IOC Country Codes — nations","title":"Table of IOC Country Codes — nations","text":"dataset contains current historic IOC country codes. codes can used filter specific nation query_athletes().","code":""},{"path":"https://stibu81.github.io/fisdata/reference/nations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of IOC Country Codes — nations","text":"","code":"nations"},{"path":"https://stibu81.github.io/fisdata/reference/nations.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of IOC Country Codes — nations","text":"data frame 223 rows 3 variables: code IOC country code consisting three capital letters country name country current code currently use?","code":""},{"path":"https://stibu81.github.io/fisdata/reference/nations.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Table of IOC Country Codes — nations","text":"https://en.wikipedia.org/wiki/List_of_IOC_country_codes Section \"Current NOCs\" countries current = TRUE section \"Historic NOCs teams, Codes still use\" current = FALSE.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Athletes — query_athletes","title":"Query Athletes — query_athletes","text":"Query athletes using various filters. Omitting filter means athletes value field returned. Filtering case-insensitive last_name, first_name, brand, string matching partial.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Athletes — query_athletes","text":"","code":"query_athletes(   last_name = \"\",   first_name = \"\",   sector = \"\",   nation = \"\",   gender = \"\",   birth_year = \"\",   brand = \"\",   active_only = FALSE )"},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Athletes — query_athletes","text":"last_name, first_name last first name. String matching partial. API support special characters, many handled automatically (see 'Details'). sector abbreviation sector, e.g., \"AL\" alpine skiing. See dataset sectors possible values. nation abbreviation nation, e.g., \"SUI\" Switzerland. value matched exactly. See dataset nations possible values. gender abbreviation gender: \"M\" male/men, \"F\" \"W\" female/women. birth_year birth year. also supports multiple years separated commas (e.g, \"1995,1998,2000\") year ranges (e.g., \"1990-1995\"). brand ski snowboard brand used athlete. String matching partial. API support special characters, many handled automatically (see 'Details'). active_only query restricted active athletes.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Athletes — query_athletes","text":"tibble following columns: active, fis_code, name, nation, age, birthdate, gender, sector, club, brand, competitor_id. active logical indicating whether athlete still active. age gives year integer, value often missing. birthdate returned character.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Athletes — query_athletes","text":"API support special character fields last_name, first_name, brand. following special characters handled automatically: à, á, å, ä, æ, ç, ć, č, ð, é, è, ê, ë, ï, ñ, ø, ó, ő, ö, œ, š, ß, ú, ü, ž. special characters must replaced suitable substitute user. One use function get competitor id athlete, needed order query athletes results query_results(). results cached data downloaded per sessions.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_athletes.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Athletes — query_athletes","text":"","code":"if (FALSE) { # \\dontrun{ # find Swiss athletes with last name \"Cuche\" query_athletes(\"cuche\", nation = \"SUI\")  # find French alpine skiers using Rossignol skis query_athletes(   sector = \"AL\",   nation = \"FRA\",   brand = \"Rossignol\",   active_only = TRUE )  # find Loïc Maillard. Note that even if the \"ï\" may be used in the query, # the name the name is returned without the special character. query_athletes(\"meillard\", \"loïc\")  # the query works the same without the special character query_athletes(\"meillard\", \"loic\") } # }"},{"path":"https://stibu81.github.io/fisdata/reference/query_competitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Competitions — query_competitions","title":"Query Competitions — query_competitions","text":"Query competitions, .e., individual races, given event.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_competitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Competitions — query_competitions","text":"","code":"query_competitions(event)"},{"path":"https://stibu81.github.io/fisdata/reference/query_competitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Competitions — query_competitions","text":"event list data frame fields/columns event_id, sector place describe single event. easiest way create data frame function query_events(). function can return multiple events, query_events() returns results one event multiple events passed, first one used. results cached data downloaded per sessions.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_competitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Competitions — query_competitions","text":"tibble following columns: place, date, time, competition, sector, category, gender, race_id.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_competitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Competitions — query_competitions","text":"","code":"if (FALSE) { # \\dontrun{ # find the Wengen alpine skiing races from the season 2024/2025 wengen_2025 <- query_events(sector = \"AL\", place = \"wengen\",                             category = \"WC\", season = 2025)  # get all the races that took place during the event query_competitions(wengen_2025) } # }"},{"path":"https://stibu81.github.io/fisdata/reference/query_events.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Events — query_events","title":"Query Events — query_events","text":"Query events using various filters. Omitting filter means events value field returned. order reduce number results, FIS page automatically restricts results one season even one month, filters used (see 'Details'). Filtering case-insensitive place, string matching partial. query_current_events() queries currently running events equivalent calling query_events() today's date.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_events.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Events — query_events","text":"","code":"query_events(   selection = c(\"all\", \"results\", \"upcoming\"),   sector = \"\",   category = \"\",   discipline = \"\",   gender = \"\",   place = \"\",   season = \"\",   month = \"\",   date = \"\" )  query_current_events(   selection = c(\"all\", \"results\", \"upcoming\"),   sector = \"\",   category = \"\",   discipline = \"\",   gender = \"\",   place = \"\" )"},{"path":"https://stibu81.github.io/fisdata/reference/query_events.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Events — query_events","text":"selection events returned: past events, results available (\"results\") upcoming events (\"upcoming\") (\"\")? sector abbreviation sector, e.g., \"AL\" alpine skiing. See dataset sectors possible values. category abbreviation category race, e.g., \"WC\" \"World Cup\". See dataset categories possible values. discipline abbreviation discipline, e.g., \"DH\" \"Downhill\". See dataset disciplines possible values. gender abbreviation gender: \"M\" male/men, \"F\" \"W\" female/women. place location race. API support special characters, many handled automatically (see 'Details'). season year season ended, .e., 2020 stands season 2019/2020. possible filter multiple seasons . month numeric giving month year filter . month considered also season given. season runs July June, , say, month 11 season 2025 translated November 2024. date date event takes place. must either Date POSIXct object string format \"%Y-%m-%d\". date used, season month ignored.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_events.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Events — query_events","text":"tibble following columns: start_date, end_date, place, nation, sector, categories, disciplines, genders, cancelled, event_id.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_events.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Events — query_events","text":"API support special character field place. following special characters handled automatically: à, á, å, ä, æ, ç, ć, č, ð, é, è, ê, ë, ï, ñ, ø, ó, ő, ö, œ, š, ß, ú, ü, ž. special characters must replaced suitable substitute user. Results always limited events single season. season explicitly provided, current season used. filters applied, results limited single month. month explicitly specified, current month used. results cached data downloaded per sessions.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_events.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Events — query_events","text":"","code":"if (FALSE) { # \\dontrun{ # query alpine skiing world cup events in February 2024 query_events(sector = \"AL\", category = \"WC\", season = 2024, month = 2)  # query ski jumping events on the large hill in the season 2020/21 query_events(sector = \"JP\", discipline = \"LH\", season = 2021)  # query cross country events on 2023-03-07 query_events(sector = \"CC\", date = \"2023-03-07\")  # calling query_events() without any argument returns all events from the # current month query_events() } # }"},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Race — query_race","title":"Query Race — query_race","text":"Query full results race.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Race — query_race","text":"","code":"query_race(competition)"},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Race — query_race","text":"competition list data frame fields/columns race_id sector describe single race. easiest way create data frame functions query_results() query_competitions(). functions can return multiple competitions, query_race() returns results one race. multiple competitions passed, first one used.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Race — query_race","text":"tibble least following columns: rank (order, start list published), bib, fis_code, name, birth_year, nation, sector, competitor_id. Depending type race, additional columns like time, run1, run2, total_time, diff_time, fis_points, cup_points.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Race — query_race","text":"Different types races may different way display results. disciplines use time measurements, use points system even combination different systems. disciplines, races involve single run single time measurement, use multiple runs accordingly multiple run times possibly total time. function tries flexible determining format used given race, known fail special cases (e.g., team races alpine skiing). results cached data downloaded per sessions.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_race.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Race — query_race","text":"","code":"if (FALSE) { # \\dontrun{ # the results for a race can be queried by using a specific race of an # athlete as input. So we get all downhill results for Marco Odermatt. odermatt <- query_athletes(\"odermatt\", \"marco\") odermatt_res <- query_results(odermatt, discipline = \"DH\")  # show the first of the results odermatt_res[1, ]  # get the full results for this race query_race(odermatt_res[1, ])  # Or we can start by querying for an event. The following finds the # competitions for Wengen 2025 wengen2025 <- query_events(sector = \"AL\", place = \"Wengen\", season = 2025) wengen2025_competitions <- query_competitions(wengen2025)  # get the full results for the downhill competition library(dplyr) wengen2025_res <- wengen2025_competitions %>%   filter(competition == \"Downhill\") %>%   query_race() wengen2025_res  # each entry of the race results can be used to get that athletes full # results. query_results(wengen2025_res[1, ]) } # }"},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Results for an Athlete — query_results","title":"Query Results for an Athlete — query_results","text":"Query results athlete using various filters. Omitting filter means results value field returned. Filtering case-insensitive place string matches partial.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Results for an Athlete — query_results","text":"","code":"query_results(athlete, season = \"\", category = \"\", place = \"\", discipline = \"\")"},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Results for an Athlete — query_results","text":"athlete list data frame fields/columns competitor_id sector describe single athlete. easiest way create data frame functions query_athletes(), query_race(), query_standings(). functions can return multiple athletes, query_results() returns results one athlete. multiple athletes passed, first one used. season year season ended, .e., 2020 stands season 2019/2020. possible filter multiple seasons . category abbreviation category race, e.g., \"WC\" \"World Cup\". See dataset categories possible values. place location race. API support special characters, many handled automatically (see 'Details'). discipline abbreviation discipline, e.g., \"DH\" \"Downhill\". See dataset disciplines possible values.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Results for an Athlete — query_results","text":"tibble following columns: athlete, date, place, nation, sector, category, discipline, rank, fis_points, cup_points, race_id.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Query Results for an Athlete — query_results","text":"API support special character field place. following special characters handled automatically: à, á, å, ä, æ, ç, ć, č, ð, é, è, ê, ë, ï, ñ, ø, ó, ő, ö, œ, š, ß, ú, ü, ž. special characters must replaced suitable substitute user. results cached data downloaded per sessions.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Results for an Athlete — query_results","text":"","code":"if (FALSE) { # \\dontrun{ # in order to query an athletes results, we first # have to obtain the competitor id, which is # required for the query. This can be conveniently # done with query_athletes(). odermatt <- query_athletes(\"odermatt\", \"marco\")  # get all of his results query_results(odermatt)  # get only World Cup Downhill results from the # season 2023/2024 query_results(   odermatt,   category = \"WC\",   season = 2024,   discipline = \"DH\" )  # get all results from Kitzbühel. Note that the # umlaut is removed in the output. query_results(odermatt, place = \"Kitzbühl\") } # }"},{"path":"https://stibu81.github.io/fisdata/reference/query_standings.html","id":null,"dir":"Reference","previous_headings":"","what":"Query Cup Standings — query_standings","title":"Query Cup Standings — query_standings","text":"Query cup standings sector, season, category (.e., cup context), gender.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_standings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Query Cup Standings — query_standings","text":"","code":"query_standings(   sector = \"\",   season = \"\",   category = \"\",   gender = \"\",   type = c(\"ranking\", \"start-list\", \"nations\") )"},{"path":"https://stibu81.github.io/fisdata/reference/query_standings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Query Cup Standings — query_standings","text":"sector abbreviation sector, e.g., \"AL\" alpine skiing. See dataset sectors possible values. season year season ended, .e., 2020 stands season 2019/2020. possible filter multiple seasons . omitted, results returned current season. category abbreviation category cup, e.g., \"WC\" \"World Cup\". See dataset categories possible values; note standing available categories. unsupported category used, FIS page unfortunately returns standings default category, usually world cup (\"WC\"). gender abbreviation gender: \"M\" male/men, \"F\" \"W\" female/women. nations cups (type = \"nations\"), use \"\" get overall nations cup. type type standings return. types may supported categories. Possible values : \"ranking\", default, returns usual ranking individual athletes determines discipline overall winner cup. \"start-list\" returns ranking start lists. \"nations\" returns ranking nations cup.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_standings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Query Cup Standings — query_standings","text":"tibble least following columns: sector, athlete, nation. Except nations cups, also columns brand competitor_id. Depending sector, multiple columns giving rank points various disciplines. example, alpine skiing (\"AL\"), columns all_rank all_points give rank points overall world cup, dh_rank dh_points give rank points downhill world cup. results cached data downloaded per sessions.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/query_standings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Query Cup Standings — query_standings","text":"","code":"if (FALSE) { # \\dontrun{ # get the standings for the women's alpine skiing world cup 2023/24. query_standings(sector = \"AL\", season = 2024,                 category = \"WC\", gender = \"W\")  # get the overall nations ranking for the alpine skiing world cup 2024/25. query_standings(sector = \"AL\", season = 2025,                 category = \"WC\", gender = \"A\",                 type = \"nations\")  # get the women's start list for the snowboard world cup 2021/22 query_standings(sector = \"SB\", season = 2022,                 category = \"WC\", gender = \"W\",                 type = \"start-list\") } # }"},{"path":"https://stibu81.github.io/fisdata/reference/sectors.html","id":null,"dir":"Reference","previous_headings":"","what":"Table of Codes for Sectors — sectors","title":"Table of Codes for Sectors — sectors","text":"dataset contains codes sectors data can obtained FIS webpage. codes can used filter specific sector query_athletes().","code":""},{"path":"https://stibu81.github.io/fisdata/reference/sectors.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Table of Codes for Sectors — sectors","text":"","code":"sectors"},{"path":"https://stibu81.github.io/fisdata/reference/sectors.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Table of Codes for Sectors — sectors","text":"data frame 14 rows 2 variables: code code sector consisting two three (parasports sectors) capital letters description clear text name sector","code":""},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":null,"dir":"Reference","previous_headings":"","what":"Show URL associated With a Query — show_url","title":"Show URL associated With a Query — show_url","text":"functions query_*() call URL FIS web page collect data. show_url() returns URL used produce table fisdata-results.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Show URL associated With a Query — show_url","text":"","code":"show_url(fisdata_df)"},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Show URL associated With a Query — show_url","text":"fisdata_df table fisdata-results produced one query_*()-functions.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Show URL associated With a Query — show_url","text":"character vector length one URL used create table. interactive session also copies URL clipboard side effect.","code":""},{"path":"https://stibu81.github.io/fisdata/reference/show_url.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Show URL associated With a Query — show_url","text":"run interactive session, URL also copied clipboard can pasted browser.","code":""}]
